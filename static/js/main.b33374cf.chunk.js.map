{"version":3,"sources":["Containers/CovidStatus/Covidstatus.module.css","Components/CardComponent/CardComponent.module.css","Containers/HomeContainer/Home.module.css","Components/CardComponent/CardComponent.js","Containers/CountryWise/CountryWise.js","Utilities/Constants.js","Containers/CovidStatus/Covidstatus.js","Containers/HomeContainer/Home.js","hoc/Auxilary/Auxilary.js","Components/DescriptionComponent/DescriptionComponent.js","App.js","serviceWorker.js","index.js","Containers/CountryWise/CountryWise.module.css"],"names":["module","exports","cardComponent","props","cardJSX","data","map","result","i","Card","className","styles","variant","key","CardContent","Typography","gutterBottom","component","label","value","Root","charts","FusionCharts","monthNames","CountryWise","state","defaultCountry","match","params","id","covidCountries","covidCountriesLoaded","covidCountryWiseStatusLoaded","covidCountryWiseStatus","confirmedDataForChart","recoveredDataForChart","deathsDataForChart","countryClickHandler","event","countryName","target","countryDataLoad","fetchCountrySpecificChartData","fetch","method","redirect","then","response","json","setState","countries","catch","error","console","log","countrywiseDataForChart","dailyReports","e","updatedDate","filter","rep","countryCode","monthName","Date","getMonth","confirmedArray","length","confirmed","recoveredArray","recovered","deathArray","deaths","GetValueSum","arr","newArray","currentMonth","forEach","month","modifiedArr","res","sum","push","countryOptions","this","country","undefined","iso2","name","confirmedDS","chart","caption","yaxisname","subcaption","numbersuffix","rotatelabels","setadaptiveymin","theme","recoveredDS","deathDS","Country","SelectBox","onChange","CardComponent","type","width","CountryChart","height","dataFormat","dataSource","Component","Covidstatus","globalStatus","globalStatusLoaded","ReactFC","fcRoot","Pie2d","FusionTheme","chartConfigs","subCaption","xAxisName","yAxisName","numberSuffix","CovidBody","SelectedCountry","Home","to","exact","activeClassName","activeStyle","color","textDecoration","pathname","path","CountryWiseComponent","aux","children","covidDescription","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,UAAY,+BAA+B,gBAAkB,qCAAqC,aAAe,oC,oBCAnID,EAAOC,QAAU,CAAC,KAAO,4BAA4B,KAAO,8B,oBCA5DD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,OAAS,qBAAqB,YAAY,0B,+SC8BvEC,EAzBO,SAACC,GAEnB,IAAMC,EAAUD,EAAME,KAAKC,KAAI,SAACC,EAAQC,GACpC,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAWC,IAAOF,KAAMG,QAAQ,WAAWC,IAAKL,GAClD,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACJ,QAAQ,KAAKK,UAAU,MAC3CV,EAAOW,OAEZ,kBAACH,EAAA,EAAD,CAAYH,QAAQ,KAAKK,UAAU,MAC9BV,EAAOY,YAO5B,OACI,yBAAKT,UAAWC,IAAOS,MAClBhB,I,sECfbiB,IAAOC,KAEP,IAAMC,EAAa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAChE,OAAQ,SAAU,YAAa,UAAW,WAAY,YAyP3CC,E,4MApPXC,MAAQ,CACJC,eAAgB,EAAKvB,MAAMwB,MAAMC,OAAOC,GACxCC,eAAgB,GAChBC,sBAAsB,EACtBC,8BAA8B,EAC9BC,uBAAwB,CAAC,CACrBf,MClBmB,YDmBnBC,MAAO,GAEX,CACID,MCrBmB,YDsBnBC,MAAO,GAEX,CACID,MCxBe,SDyBfC,MAAO,IAEXe,sBAAuB,GACvBC,sBAAuB,GACvBC,mBAAoB,I,EAoGxBC,oBAAsB,SAACC,GACnB,IAAMC,EAAcD,EAAME,OAAOrB,MAEjC,EAAKsB,gBAAgBF,GACrB,EAAKG,8BAA8BH,I,kEArGlB,IAAD,OAOhBI,MC1C0B,4CDqCL,CACjBC,OAAQ,MACRC,SAAU,WAITC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAvC,GACF,EAAK0C,SAAS,CACVnB,eAAgBvB,EAAO2C,UACvBnB,sBAAsB,IAG1B,EAAKU,gBAAgB,EAAKhB,MAAMC,gBAChC,EAAKgB,8BAA8B,EAAKjB,MAAMC,mBAEjDyB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,Q,oDAGfb,GAAc,IAAD,OAKvCI,MCzDoB,4GDqDC,CACjBC,OAAQ,MACRC,SAAU,WAGTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAzC,GAGF,IAAIkD,EAA0BlD,EAAKmD,aAAalD,KAAI,SAAUmD,GAC1D,MAAO,CACHC,YAAaD,EAAEC,YACfR,UAAWO,EAAEP,UAAUS,QAAO,SAAAC,GAAG,OAAIA,EAAIC,cAAgBtB,KACzDuB,UAAWvC,EAAW,IAAIwC,KAAKN,EAAEC,aAAaM,gBAGlDC,EAAiBV,EAAwBjD,KAAI,SAAUmD,GACvD,MAAO,CACHvC,MAAOuC,EAAEK,UACT3C,MAA+B,IAAvBsC,EAAEP,UAAUgB,OAAgBT,EAAEP,UAAU,GAAGiB,UAAY,MAInEC,EAAiBb,EAAwBjD,KAAI,SAAUmD,GACvD,MAAO,CACHvC,MAAOuC,EAAEK,UACT3C,MAA+B,IAAvBsC,EAAEP,UAAUgB,OAAgBT,EAAEP,UAAU,GAAGmB,UAAY,MAGnEC,EAAaf,EAAwBjD,KAAI,SAAUmD,GACnD,MAAO,CACHvC,MAAOuC,EAAEK,UACT3C,MAA+B,IAAvBsC,EAAEP,UAAUgB,OAAgBT,EAAEP,UAAU,GAAGqB,OAAS,MAIpE,EAAKtB,SAAS,CACVf,sBAAuB,EAAKsC,YAAYP,GACxC9B,sBAAuB,EAAKqC,YAAYJ,GACxChC,mBAAoB,EAAKoC,YAAYF,QAE1CnB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,Q,sCAG/Bb,GAAc,IAAD,OAQzBI,MC7G0B,4CD2GsBJ,EAL3B,CACjBK,OAAQ,MACRC,SAAU,WAMTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAvC,GACF,EAAK0C,SAAS,CACVvB,eAAgBa,EAChBN,uBAAwB,CAAC,CACrBf,MClHO,YDmHPC,MAAOZ,EAAO4D,UAAUhD,OAE5B,CACID,MCrHO,YDsHPC,MAAOZ,EAAO8D,UAAUlD,OAE5B,CACID,MCxHG,SDyHHC,MAAOZ,EAAOgE,OAAOpD,QAEzBa,8BAA8B,OAGrCmB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,Q,kCAUjCqB,GACR,IAAIC,EAAW,GACXC,EAAepD,GAAW,IAAIwC,MAAOC,YAgBzC,OAfAzC,EAAWqD,SAAQ,SAAAC,GACf,IAAIC,EAAcL,EAAId,QAAO,SAAAoB,GAAG,OAAIA,EAAI7D,QAAU2D,KAClD,GAAIC,EAAYZ,OAAS,EAAG,CACxB,IAAIc,EAAM,EAENA,EADAH,IAAUF,EACJG,EAAYA,EAAYZ,OAAS,GAAG/C,MAEpC2D,EAAYA,EAAYZ,OAAS,GAAG/C,MAK9CuD,EAASO,KAAK,CAAE/D,MAAO2D,EAAO1D,MAAO6D,QAGtCN,I,+BAIP,IAAIQ,EAAiB,KACjBC,KAAK1D,MAAMM,uBACXmD,EAAiBC,KAAK1D,MAAMK,eAAexB,KAAI,SAAC8E,EAAS5E,GACrD,YAAqB6E,IAAjBD,EAAQE,WAAuCD,IAAjBD,EAAQG,KAElC,4BAAQ1E,IAAKL,EAAGW,MAAOiE,EAAQE,MAAOF,EAAQG,MAG3C,SAKnB,IAAMC,EAAc,CAChBC,MAAO,CACHC,QAAS,2BACTC,UAAW,kBACXC,WAAY,GACZC,aAAc,GACdC,aAAc,IACdC,gBAAiB,IACjBC,MAAO,SAEX3F,KAAM8E,KAAK1D,MAAMS,uBAGf+D,EAAc,CAChBR,MAAO,CACHC,QAAS,2BACTC,UAAW,kBACXC,WAAY,GACZC,aAAc,GACdC,aAAc,IACdC,gBAAiB,IACjBC,MAAO,SAEX3F,KAAM8E,KAAK1D,MAAMU,uBAGf+D,EAAU,CACZT,MAAO,CACHC,QAAS,uBACTC,UAAW,cACXC,WAAY,GACZC,aAAc,GACdC,aAAc,IACdC,gBAAiB,IACjBC,MAAO,SAEX3F,KAAM8E,KAAK1D,MAAMW,oBAGrB,OACI,6BACI,yBAAK1B,UAAWC,IAAOwF,SACnB,4BAAQzF,UAAWC,IAAOyF,UAAWC,SAAUlB,KAAK9C,oBAAqBlB,MAAOgE,KAAK1D,MAAMC,gBACtFwD,GAEL,6BAESC,KAAK1D,MAAMO,6BAAgC,kBAACsE,EAAD,CAAejG,KAAM8E,KAAK1D,MAAMQ,yBAA6B,OAIrH,yBAAKvB,UAAWC,IAAOwF,SACnB,kBAAC,IAAD,CACII,KAAK,SACLC,MAAM,OACN9F,UAAWC,IAAO8F,aAClBC,OAAO,OACPC,WAAW,OACXC,WAAYpB,IAEhB,kBAAC,IAAD,CACIe,KAAK,SACLC,MAAM,OACN9F,UAAWC,IAAO8F,aAClBC,OAAO,OACPC,WAAW,OACXC,WAAYX,IAEhB,kBAAC,IAAD,CACIM,KAAK,SACLC,MAAM,OACN9F,UAAWC,IAAO8F,aAClBC,OAAO,OACPC,WAAW,OACXC,WAAYV,U,GA5OVW,a,oCE+FXC,E,4MA1FXrF,MAAQ,CACJsF,aAAc,CAAC,CACX7F,MDlBmB,YCmBnBC,MAAO,GAEX,CACID,MDrBmB,YCsBnBC,MAAO,GAEX,CACID,MDxBe,SCyBfC,MAAO,IAEX6F,oBAAoB,G,kEAGH,IAAD,OAMhBrE,MDxCmB,iCCmCE,CACjBC,OAAQ,MACRC,SAAU,WAITC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAvC,GACF,EAAK0C,SAAS,CACV8D,aAAc,CAAC,CACX7F,MD3CO,YC4CPC,MAAOZ,EAAO4D,UAAUhD,OAE5B,CACID,MD9CO,YC+CPC,MAAOZ,EAAO8D,UAAUlD,OAE5B,CACID,MDjDG,SCkDHC,MAAOZ,EAAOgE,OAAOpD,QAEzB6F,oBAAoB,OAG3B7D,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,Q,+BAKzC6D,IAAQC,OAAO5F,IAAc6F,IAAOC,KACpC,IAAIC,EAAe,CACfd,KAAM,QACNC,MAAO,OACPE,OAAQ,MACRC,WAAY,OACZC,WAAY,CAERnB,MAAO,CAEHC,QAAS,yBAET4B,WAAY,GAEZC,UAAW,SAEXC,UAAW,QACXC,aAAc,GAEdzB,MAAO,SAGX3F,KAAO8E,KAAK1D,MAAMsF,eAI1B,OACI,yBAAKrG,UAAWC,IAAO+G,WAEnB,wBAAIhH,UAAWC,IAAOgH,iBAAtB,eAEKxC,KAAK1D,MAAMuF,mBACR,6BAAK,kBAACV,EAAD,CACDjG,KAAM8E,KAAK1D,MAAMsF,eAAgB,kBAAC,IAAD,eAAUrG,UAAWC,IAAO8F,cAAkBY,KAAyB,U,GAhF1GR,aCqBXe,E,uKA9BP,OACI,yBAAKlH,UAAWC,IAAOiH,MACnB,gCACI,6BACI,4BACI,4BAAI,kBAAC,IAAD,CACAC,GAAG,sBACHC,OAAK,EACLC,gBAAgB,YAChBC,YAAa,CACTC,MAAO,UACPC,eAAgB,cANpB,gBASJ,4BAAI,kBAAC,IAAD,CAASL,GAAI,CACbM,SAAU,gBADV,uBAbpB,IAmBI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,eAAenH,UAAWoH,IACtC,kBAAC,IAAD,CAAOD,KAAK,sBAAsBnH,UAAW6F,U,GAxB9CD,aCRJyB,EAFH,SAAAnI,GAAK,OAAIA,EAAMoI,UCgBZC,EAXU,SAACrI,GAAD,OACrB,kBAAC,EAAD,KACI,8BJP6B,kFIQ7B,6BACA,8BJR6B,kTIS7B,4BJRwB,kBISxB,8BJR8B,2OKgBvBsI,MAZf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK/H,UAAU,OACb,gDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDYgI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlH,MACvB,2DCVNmH,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvG,MAAK,SAAAwG,GACJA,EAAaC,gBAEdpG,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMoG,a,mBExI5BxJ,EAAOC,QAAU,CAAC,QAAU,6BAA6B,aAAe,kCAAkC,UAAY,+BAA+B,gBAAkB,wC","file":"static/js/main.b33374cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CovidBody\":\"Covidstatus_CovidBody__2XvX-\",\"SelectedCountry\":\"Covidstatus_SelectedCountry__Cwgv2\",\"CountryChart\":\"Covidstatus_CountryChart__1i0rP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Root\":\"CardComponent_Root__3p4EY\",\"Card\":\"CardComponent_Card__3ke8W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home_Home__1NgI0\",\"active\":\"Home_active__31Qhe\",\"my-active\":\"Home_my-active__1DunR\"};","//import liraries\r\nimport React from 'react';\r\nimport styles from './CardComponent.module.css';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\n// create a component\r\nconst cardComponent = (props) => {\r\n\r\n    const cardJSX = props.data.map((result, i) => {\r\n        return (\r\n            <Card className={styles.Card} variant=\"outlined\" key={i}>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h1\">\r\n                        {result.label}\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        {result.value}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className={styles.Root}>\r\n            {cardJSX}\r\n        </div>\r\n    );\r\n}\r\n\r\n//make this component available to the app\r\nexport default cardComponent;\r\n","//import liraries\r\nimport React, { Component } from 'react';\r\nimport * as Constants from '../../Utilities/Constants';\r\nimport CardComponent from '../../Components/CardComponent/CardComponent';\r\nimport styles from './CountryWise.module.css';\r\n\r\nimport FusionCharts from \"fusioncharts\";\r\nimport charts from \"fusioncharts/fusioncharts.charts\";\r\nimport ReactFusioncharts from \"react-fusioncharts\";\r\n\r\ncharts(FusionCharts);\r\n\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\n\r\n// create a component\r\nclass CountryWise extends Component {\r\n    state = {\r\n        defaultCountry: this.props.match.params.id,\r\n        covidCountries: [],\r\n        covidCountriesLoaded: false,\r\n        covidCountryWiseStatusLoaded: false,\r\n        covidCountryWiseStatus: [{\r\n            label: Constants.StatusConfirmed,\r\n            value: 0\r\n        },\r\n        {\r\n            label: Constants.StatusRecovered,\r\n            value: 0\r\n        },\r\n        {\r\n            label: Constants.StatusDeath,\r\n            value: 0\r\n        }],\r\n        confirmedDataForChart: [],\r\n        recoveredDataForChart: [],\r\n        deathsDataForChart: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        debugger;\r\n        var requestOptions = {\r\n            method: 'GET',\r\n            redirect: 'follow'\r\n        };\r\n\r\n        fetch(Constants.CovidApiCountryURL, requestOptions)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                this.setState({\r\n                    covidCountries: result.countries,\r\n                    covidCountriesLoaded: true\r\n                });\r\n\r\n                this.countryDataLoad(this.state.defaultCountry);\r\n                this.fetchCountrySpecificChartData(this.state.defaultCountry);\r\n            })\r\n            .catch(error => console.log('error', error));\r\n    }\r\n\r\n    fetchCountrySpecificChartData(countryName) {\r\n        var requestOptions = {\r\n            method: 'GET',\r\n            redirect: 'follow'\r\n        };\r\n        fetch(Constants.chartDataApi, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // Work with JSON data here\r\n\r\n                var countrywiseDataForChart = data.dailyReports.map(function (e) {\r\n                    return {\r\n                        updatedDate: e.updatedDate,\r\n                        countries: e.countries.filter(rep => rep.countryCode === countryName),\r\n                        monthName: monthNames[new Date(e.updatedDate).getMonth()],\r\n                    };\r\n                });\r\n                var confirmedArray = countrywiseDataForChart.map(function (e) {\r\n                    return {\r\n                        label: e.monthName,\r\n                        value: (e.countries.length === 1) ? e.countries[0].confirmed : 0\r\n                    };\r\n                });\r\n\r\n                var recoveredArray = countrywiseDataForChart.map(function (e) {\r\n                    return {\r\n                        label: e.monthName,\r\n                        value: (e.countries.length === 1) ? e.countries[0].recovered : 0\r\n                    };\r\n                });\r\n                var deathArray = countrywiseDataForChart.map(function (e) {\r\n                    return {\r\n                        label: e.monthName,\r\n                        value: (e.countries.length === 1) ? e.countries[0].deaths : 0\r\n                    };\r\n                });\r\n\r\n                this.setState({\r\n                    confirmedDataForChart: this.GetValueSum(confirmedArray),\r\n                    recoveredDataForChart: this.GetValueSum(recoveredArray),\r\n                    deathsDataForChart: this.GetValueSum(deathArray)\r\n                });\r\n            }).catch(error => console.log('error', error));\r\n    }\r\n\r\n    countryDataLoad(countryName) {\r\n        var requestOptions = {\r\n            method: 'GET',\r\n            redirect: 'follow'\r\n        };\r\n\r\n        var reqeustURL = Constants.CovidApiCountryURL + countryName;\r\n\r\n        fetch(reqeustURL, requestOptions)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                this.setState({\r\n                    defaultCountry: countryName,\r\n                    covidCountryWiseStatus: [{\r\n                        label: Constants.StatusConfirmed,\r\n                        value: result.confirmed.value\r\n                    },\r\n                    {\r\n                        label: Constants.StatusRecovered,\r\n                        value: result.recovered.value\r\n                    },\r\n                    {\r\n                        label: Constants.StatusDeath,\r\n                        value: result.deaths.value\r\n                    }],\r\n                    covidCountryWiseStatusLoaded: true\r\n                });\r\n            })\r\n            .catch(error => console.log('error', error));\r\n    }\r\n\r\n    countryClickHandler = (event) => {\r\n        const countryName = event.target.value;\r\n\r\n        this.countryDataLoad(countryName);\r\n        this.fetchCountrySpecificChartData(countryName);\r\n    }\r\n\r\n    GetValueSum(arr) {\r\n        var newArray = [];\r\n        var currentMonth = monthNames[new Date().getMonth()];\r\n        monthNames.forEach(month => {\r\n            var modifiedArr = arr.filter(res => res.label === month);\r\n            if (modifiedArr.length > 0) {\r\n                var sum = 0;\r\n                if (month === currentMonth) {\r\n                    sum = modifiedArr[modifiedArr.length - 2].value;\r\n                } else {\r\n                    sum = modifiedArr[modifiedArr.length - 1].value;\r\n                }\r\n                /*var sum = modifiedArr.reduce(function (total, currentValue) {\r\n                    return total + currentValue.value;\r\n                }, 0);*/\r\n                newArray.push({ label: month, value: sum });\r\n            }\r\n        });\r\n        return newArray\r\n    }\r\n\r\n    render() {\r\n        let countryOptions = null;\r\n        if (this.state.covidCountriesLoaded) {\r\n            countryOptions = this.state.covidCountries.map((country, i) => {\r\n                if (country.iso2 !== undefined && country.name !== undefined) {\r\n                    return (\r\n                        <option key={i} value={country.iso2}>{country.name}</option>\r\n                    );\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n        }\r\n\r\n        const confirmedDS = {\r\n            chart: {\r\n                caption: \"Covid-19 Confirmed Count\",\r\n                yaxisname: \"Confirmed Count\",\r\n                subcaption: \"\",\r\n                numbersuffix: \"\",\r\n                rotatelabels: \"1\",\r\n                setadaptiveymin: \"1\",\r\n                theme: \"candy\"\r\n            },\r\n            data: this.state.confirmedDataForChart\r\n        };\r\n\r\n        const recoveredDS = {\r\n            chart: {\r\n                caption: \"Covid-19 Recovered Count\",\r\n                yaxisname: \"Recovered Count\",\r\n                subcaption: \"\",\r\n                numbersuffix: \"\",\r\n                rotatelabels: \"1\",\r\n                setadaptiveymin: \"1\",\r\n                theme: \"candy\"\r\n            },\r\n            data: this.state.recoveredDataForChart\r\n        };\r\n\r\n        const deathDS = {\r\n            chart: {\r\n                caption: \"Covid-19 Death Count\",\r\n                yaxisname: \"Death Count\",\r\n                subcaption: \"\",\r\n                numbersuffix: \"\",\r\n                rotatelabels: \"1\",\r\n                setadaptiveymin: \"1\",\r\n                theme: \"candy\"\r\n            },\r\n            data: this.state.deathsDataForChart\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <div className={styles.Country}>\r\n                    <select className={styles.SelectBox} onChange={this.countryClickHandler} value={this.state.defaultCountry}>\r\n                        {countryOptions}\r\n                    </select>\r\n                    <div>\r\n                        {\r\n                            (this.state.covidCountryWiseStatusLoaded) ? <CardComponent data={this.state.covidCountryWiseStatus} /> : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className={styles.Country}>\r\n                    <ReactFusioncharts\r\n                        type=\"spline\"\r\n                        width=\"100%\"\r\n                        className={styles.CountryChart}\r\n                        height=\"100%\"\r\n                        dataFormat=\"JSON\"\r\n                        dataSource={confirmedDS}\r\n                    />\r\n                    <ReactFusioncharts\r\n                        type=\"spline\"\r\n                        width=\"100%\"\r\n                        className={styles.CountryChart}\r\n                        height=\"100%\"\r\n                        dataFormat=\"JSON\"\r\n                        dataSource={recoveredDS}\r\n                    />\r\n                    <ReactFusioncharts\r\n                        type=\"spline\"\r\n                        width=\"100%\"\r\n                        className={styles.CountryChart}\r\n                        height=\"100%\"\r\n                        dataFormat=\"JSON\"\r\n                        dataSource={deathDS}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//make this component available to the app\r\nexport default CountryWise;","export const CovidDescriptionPart1 = \"Coronavirus disease (COVID-19) is an infectious disease caused by a new virus.\";\r\nexport const CovidDescriptionPart2 = \"The disease causes respiratory illness (like the flu) with symptoms such as a cough, fever, and in more severe cases, difficulty breathing. You can protect yourself by washing your hands frequently, avoiding touching your face, and avoiding close contact (1 meter or 3 feet) with people who are unwell.\";\r\nexport const CovidSpreadTitle = \"HOW IT SPREADS\";\r\nexport const CovidSpreadDescription = \"Coronavirus disease spreads primarily through contact with an infected person when they cough or sneeze. It also spreads when a person touches a surface or object that has the virus on it, then touches their eyes, nose, or mouth.\";\r\nexport const CovidApiURL = \"https://covid19.mathdro.id/api\";\r\nexport const CovidApiCountryURL = \"https://covid19.mathdro.id/api/countries/\";\r\nexport const StatusConfirmed = \"Confirmed\";\r\nexport const StatusRecovered = \"Recovered\";\r\nexport const StatusDeath = \"Deaths\";\r\nexport const chartDataApi = \"https://raw.githubusercontent.com/maxMaxineChen/COVID-19-worldwide-json-data-script/master/data/data.json\";","//import liraries\r\nimport React, { Component } from 'react';\r\nimport * as Constants from '../../Utilities/Constants';\r\nimport styles from './Covidstatus.module.css';\r\n\r\nimport CardComponent from '../../Components/CardComponent/CardComponent';\r\n\r\n// Include the react-fusioncharts component\r\nimport ReactFC from \"react-fusioncharts\";\r\n\r\n// Include the fusioncharts library\r\nimport FusionCharts from \"fusioncharts\";\r\n\r\n// Include the chart type\r\nimport Pie2d from \"fusioncharts/fusioncharts.charts\";\r\n\r\n// Include the theme as fusion\r\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\r\n\r\n\r\n// create a component\r\nclass Covidstatus extends Component {\r\n    state = {\r\n        globalStatus: [{\r\n            label: Constants.StatusConfirmed,\r\n            value: 0\r\n        },\r\n        {\r\n            label: Constants.StatusRecovered,\r\n            value: 0\r\n        },\r\n        {\r\n            label: Constants.StatusDeath,\r\n            value: 0\r\n        }],\r\n        globalStatusLoaded: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        var requestOptions = {\r\n            method: 'GET',\r\n            redirect: 'follow'\r\n        };\r\n\r\n        fetch(Constants.CovidApiURL, requestOptions)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                this.setState({\r\n                    globalStatus: [{\r\n                        label: Constants.StatusConfirmed,\r\n                        value: result.confirmed.value\r\n                    },\r\n                    {\r\n                        label: Constants.StatusRecovered,\r\n                        value: result.recovered.value\r\n                    },\r\n                    {\r\n                        label: Constants.StatusDeath,\r\n                        value: result.deaths.value\r\n                    }],\r\n                    globalStatusLoaded: true\r\n                })\r\n            })\r\n            .catch(error => console.log('error', error));\r\n\r\n    }\r\n\r\n    render() {\r\n        ReactFC.fcRoot(FusionCharts, Pie2d, FusionTheme);\r\n        let chartConfigs = {\r\n            type: \"Pie2d\", // The chart type\r\n            width: \"100%\", // Width of the chart\r\n            height: \"300\", // Height of the chart\r\n            dataFormat: \"json\", // Data type\r\n            dataSource: {\r\n                // Chart Configuration\r\n                chart: {\r\n                    //Set the chart caption\r\n                    caption: \"Global Covid-19 Status\",\r\n                    //Set the chart subcaption\r\n                    subCaption: \"\",\r\n                    //Set the x-axis name\r\n                    xAxisName: \"Status\",\r\n                    //Set the y-axis name\r\n                    yAxisName: \"Count\",\r\n                    numberSuffix: \"\",\r\n                    //Set the theme for your chart\r\n                    theme: \"candy\"\r\n                },\r\n                // Chart Data\r\n                data:  this.state.globalStatus\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div className={styles.CovidBody}>\r\n            \r\n                <h3 className={styles.SelectedCountry}>Global Case</h3>\r\n                {\r\n                    (this.state.globalStatusLoaded) ?\r\n                        <div><CardComponent\r\n                            data={this.state.globalStatus} /><ReactFC  className={styles.CountryChart} {...chartConfigs} /></div> : null\r\n                    /*(this.state.globalStatusLoaded) ?\r\n                        <ReactFC {...chartConfigs} /> : null*/\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//make this component available to the app\r\nexport default Covidstatus;\r\n","//import liraries\r\nimport React, { Component } from 'react';\r\nimport { Route, NavLink, Switch } from 'react-router-dom';\r\n\r\nimport styles from './Home.module.css'\r\n\r\nimport CountryWiseComponent from '../CountryWise/CountryWise';\r\nimport Covidstatus from '../CovidStatus/Covidstatus';\r\n\r\n// create a component\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div className={styles.Home}>\r\n                <header>\r\n                    <nav>\r\n                        <ul>\r\n                            <li><NavLink\r\n                                to=\"/Covid-19-Dashboard\"\r\n                                exact\r\n                                activeClassName=\"my-active\"\r\n                                activeStyle={{\r\n                                    color: \"#fa923f\",\r\n                                    textDecoration: \"underline\"\r\n                                }}\r\n                            >Global Case</NavLink></li>\r\n                            <li><NavLink to={{\r\n                                pathname: \"/country/IN\"\r\n                            }}>Case By Country</NavLink></li>\r\n                        </ul>\r\n                    </nav>\r\n                </header>-\r\n                <Switch>\r\n                    <Route path=\"/country/:id\" component={CountryWiseComponent} />\r\n                    <Route path=\"/Covid-19-Dashboard\" component={Covidstatus} />\r\n                </Switch>\r\n\r\n            </div>);\r\n    }\r\n}\r\n\r\n//make this component available to the app\r\nexport default Home;\r\n","const aux = props => props.children;\r\n\r\nexport default aux;","//import liraries\r\nimport React from 'react';\r\nimport * as Constants from '../../Utilities/Constants';\r\nimport Aux from '../../hoc/Auxilary/Auxilary';\r\n// create a component\r\nconst covidDescription = (props) => (\r\n    <Aux>\r\n        <span>{Constants.CovidDescriptionPart1}</span>\r\n        <br />\r\n        <span>{Constants.CovidDescriptionPart2}</span>\r\n        <h3>{Constants.CovidSpreadTitle}</h3>\r\n        <span>{Constants.CovidSpreadDescription}</span>\r\n    </Aux>\r\n)\r\n\r\n//make this component available to the app\r\nexport default covidDescription;\r\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\n\nimport Home from './Containers/HomeContainer/Home';\nimport CovidDescription from './Components/DescriptionComponent/DescriptionComponent';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <h1>Covid-19 Tracker</h1>\n        <CovidDescription />\n        <Home/>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Country\":\"CountryWise_Country___0Drf\",\"CountryChart\":\"CountryWise_CountryChart__EHYXO\",\"SelectBox\":\"CountryWise_SelectBox__UreQt\",\"SelectedCountry\":\"CountryWise_SelectedCountry__1LEgi\"};"],"sourceRoot":""}