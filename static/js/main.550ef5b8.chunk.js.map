{"version":3,"sources":["Containers/CovidStatus/Covidstatus.module.css","Components/CardComponent/CardComponent.module.css","Components/CardComponent/CardComponent.js","Containers/CountryWise/CountryWise.js","Utilities/Constants.js","Containers/CovidStatus/Covidstatus.js","hoc/Auxilary/Auxilary.js","Components/DescriptionComponent/DescriptionComponent.js","App.js","serviceWorker.js","index.js","Containers/CountryWise/CountryWise.module.css"],"names":["module","exports","cardComponent","props","cardJSX","data","map","result","i","Card","className","styles","variant","key","CardContent","Typography","gutterBottom","component","Title","Status","Root","CountryWise","state","defaultCountry","covidCountries","covidCountriesLoaded","covidCountryWiseStatusLoaded","covidCountryWiseStatus","countryClickHandler","event","countryName","target","value","countryDataLoad","fetch","method","redirect","then","response","json","setState","countries","catch","error","console","log","confirmed","recovered","deaths","countryOptions","this","country","undefined","iso2","name","Country","SelectBox","onChange","SelectedCountry","CardComponent","Component","Covidstatus","globalStatus","globalStatusLoaded","CovidBody","aux","children","covidDescription","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,UAAY,+BAA+B,gBAAkB,uC,oBCA/ED,EAAOC,QAAU,CAAC,KAAO,4BAA4B,KAAO,8B,6RC8B7CC,EAzBO,SAACC,GAEnB,IAAMC,EAAUD,EAAME,KAAKC,KAAI,SAACC,EAAQC,GACpC,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAWC,IAAOF,KAAMG,QAAQ,WAAWC,IAAKL,GAClD,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACJ,QAAQ,KAAKK,UAAU,MAC3CV,EAAOW,OAEZ,kBAACH,EAAA,EAAD,CAAYH,QAAQ,KAAKK,UAAU,MAC9BV,EAAOY,aAO5B,OACI,yBAAKT,UAAWC,IAAOS,MAClBhB,I,iBCyFEiB,E,4MA1GXC,MAAQ,CACJC,eAAgB,EAAKpB,MAAMoB,eAC3BC,eAAgB,GAChBC,sBAAsB,EACtBC,8BAA8B,EAC9BC,uBAAwB,CAAC,CACrBT,MCRmB,YDSnBC,OAAQ,GAEZ,CACID,MCXmB,YDYnBC,OAAQ,GAEZ,CACID,MCde,SDefC,OAAQ,K,EAsDhBS,oBAAsB,SAACC,GACnB,IAAMC,EAAcD,EAAME,OAAOC,MACjC,EAAKC,gBAAgBH,I,kEApDJ,IAAD,OAMhBI,MAAM,2CALe,CACjBC,OAAQ,MACRC,SAAU,WAITC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA9B,GACF,EAAKiC,SAAS,CACVhB,eAAgBjB,EAAOkC,UACvBhB,sBAAsB,IAG1B,EAAKQ,gBAAgB,EAAKX,MAAMC,mBAEnCmB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,Q,sCAG7Bb,GAAc,IAAD,OAQzBI,MAFiB,4CAA8CJ,EAL1C,CACjBK,OAAQ,MACRC,SAAU,WAMTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA9B,GACF,EAAKiC,SAAS,CACVjB,eAAgBO,EAChBH,uBAAwB,CAAC,CACrBT,MCtDO,YDuDPC,OAAQZ,EAAOuC,UAAUd,OAE7B,CACId,MCzDO,YD0DPC,OAAQZ,EAAOwC,UAAUf,OAE7B,CACId,MC5DG,SD6DHC,OAAQZ,EAAOyC,OAAOhB,QAE1BN,8BAA8B,OAGrCgB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,Q,+BASzC,IAAIM,EAAiB,KAarB,OAZIC,KAAK5B,MAAMG,uBACXwB,EAAiBC,KAAK5B,MAAME,eAAelB,KAAI,SAAC6C,EAAS3C,GACrD,YAAqB4C,IAAjBD,EAAQE,WAAuCD,IAAjBD,EAAQG,KAElC,4BAAQzC,IAAKL,EAAGwB,MAAOmB,EAAQG,MAAOH,EAAQG,MAG3C,SAMf,yBAAK5C,UAAWC,IAAO4C,SACnB,4BAAQ7C,UAAWC,IAAO6C,UAAWC,SAAUP,KAAKtB,oBAAqBI,MAAOkB,KAAK5B,MAAMC,gBACtF0B,GAEL,6BACI,wBAAIvC,UAAWC,IAAO+C,iBAAtB,aAAkDR,KAAK5B,MAAMC,gBAGxD2B,KAAK5B,MAAMI,6BAAgC,kBAACiC,EAAD,CAAetD,KAAM6C,KAAK5B,MAAMK,yBAA6B,W,GAlGvGiC,aEgEXC,E,4MA7DXvC,MAAQ,CACJwC,aAAc,CAAC,CACX5C,MDNmB,YCOnBC,OAAQ,GAEZ,CACID,MDTmB,YCUnBC,OAAQ,GAEZ,CACID,MDZe,SCafC,OAAQ,IAEZ4C,oBAAoB,G,kEAGH,IAAD,OAMhB7B,MAAM,iCALe,CACjBC,OAAQ,MACRC,SAAU,WAITC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA9B,GACF,EAAKiC,SAAS,CACVsB,aAAc,CAAC,CACX5C,MD/BO,YCgCPC,OAAQZ,EAAOuC,UAAUd,OAE7B,CACId,MDlCO,YCmCPC,OAAQZ,EAAOwC,UAAUf,OAE7B,CACId,MDrCG,SCsCHC,OAAQZ,EAAOyC,OAAOhB,QAE1B+B,oBAAoB,OAG3BrB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,Q,+BAKzC,OACI,yBAAKjC,UAAWC,IAAOqD,WAClB,wBAAItD,UAAWC,IAAO+C,iBAAtB,eAEAR,KAAK5B,MAAMyC,mBACZ,kBAACJ,EAAD,CACItD,KAAM6C,KAAK5B,MAAMwC,eAAmB,KAE5C,kBAAC,EAAD,CAAsBvC,eAAe,e,GAvDvBqC,aCPXK,EAFH,SAAA9D,GAAK,OAAIA,EAAM+D,UCgBZC,EAXU,SAAChE,GAAD,OACrB,kBAAC,EAAD,KACI,8BHP6B,kFGQ7B,6BACA,8BHR6B,kTGS7B,4BHRwB,kBGSxB,8BHR8B,2OIavBiE,MAVf,WACE,OACE,yBAAK1D,UAAU,OACb,gDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCc2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdzC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMyC,a,mBExI5BpF,EAAOC,QAAU,CAAC,QAAU,6BAA6B,UAAY,+BAA+B,gBAAkB,wC","file":"static/js/main.550ef5b8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CovidBody\":\"Covidstatus_CovidBody__2XvX-\",\"SelectedCountry\":\"Covidstatus_SelectedCountry__Cwgv2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Root\":\"CardComponent_Root__3p4EY\",\"Card\":\"CardComponent_Card__3ke8W\"};","//import liraries\r\nimport React from 'react';\r\nimport styles from './CardComponent.module.css';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\n// create a component\r\nconst cardComponent = (props) => {\r\n\r\n    const cardJSX = props.data.map((result, i) => {\r\n        return (\r\n            <Card className={styles.Card} variant=\"outlined\" key={i}>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h1\">\r\n                        {result.Title}\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        {result.Status}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className={styles.Root}>\r\n            {cardJSX}\r\n        </div>\r\n    );\r\n}\r\n\r\n//make this component available to the app\r\nexport default cardComponent;\r\n","//import liraries\r\nimport React, { Component } from 'react';\r\nimport * as Constants from '../../Utilities/Constants';\r\nimport CardComponent from '../../Components/CardComponent/CardComponent';\r\nimport styles from './CountryWise.module.css';\r\n\r\n// create a component\r\nclass CountryWise extends Component {\r\n    state = {\r\n        defaultCountry: this.props.defaultCountry,\r\n        covidCountries: [],\r\n        covidCountriesLoaded: false,\r\n        covidCountryWiseStatusLoaded: false,\r\n        covidCountryWiseStatus: [{\r\n            Title: Constants.StatusConfirmed,\r\n            Status: 0\r\n        },\r\n        {\r\n            Title: Constants.StatusRecovered,\r\n            Status: 0\r\n        },\r\n        {\r\n            Title: Constants.StatusDeath,\r\n            Status: 0\r\n        }]\r\n    }\r\n\r\n    componentDidMount() {\r\n        var requestOptions = {\r\n            method: 'GET',\r\n            redirect: 'follow'\r\n        };\r\n\r\n        fetch(\"https://covid19.mathdro.id/api/countries\", requestOptions)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                this.setState({\r\n                    covidCountries: result.countries,\r\n                    covidCountriesLoaded: true\r\n                });\r\n\r\n                this.countryDataLoad(this.state.defaultCountry);\r\n            })\r\n            .catch(error => console.log('error', error));\r\n    }\r\n\r\n    countryDataLoad(countryName) {\r\n        var requestOptions = {\r\n            method: 'GET',\r\n            redirect: 'follow'\r\n        };\r\n\r\n        var reqeustURL = \"https://covid19.mathdro.id/api/countries/\" + countryName;\r\n\r\n        fetch(reqeustURL, requestOptions)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                this.setState({\r\n                    defaultCountry: countryName,\r\n                    covidCountryWiseStatus: [{\r\n                        Title: Constants.StatusConfirmed,\r\n                        Status: result.confirmed.value\r\n                    },\r\n                    {\r\n                        Title: Constants.StatusRecovered,\r\n                        Status: result.recovered.value\r\n                    },\r\n                    {\r\n                        Title: Constants.StatusDeath,\r\n                        Status: result.deaths.value\r\n                    }],\r\n                    covidCountryWiseStatusLoaded: true\r\n                });\r\n            })\r\n            .catch(error => console.log('error', error));\r\n    }\r\n\r\n    countryClickHandler = (event) => {\r\n        const countryName = event.target.value;\r\n        this.countryDataLoad(countryName);\r\n    }\r\n\r\n    render() {\r\n        let countryOptions = null;\r\n        if (this.state.covidCountriesLoaded) {\r\n            countryOptions = this.state.covidCountries.map((country, i) => {\r\n                if (country.iso2 !== undefined && country.name !== undefined) {\r\n                    return (\r\n                        <option key={i} value={country.name}>{country.name}</option>\r\n                    );\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n        }\r\n\r\n        return (\r\n            <div className={styles.Country}>\r\n                <select className={styles.SelectBox} onChange={this.countryClickHandler} value={this.state.defaultCountry}>\r\n                    {countryOptions}\r\n                </select>\r\n                <div>\r\n                    <h3 className={styles.SelectedCountry}>Country : {this.state.defaultCountry}</h3>\r\n\r\n                    {\r\n                        (this.state.covidCountryWiseStatusLoaded) ? <CardComponent data={this.state.covidCountryWiseStatus} /> : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//make this component available to the app\r\nexport default CountryWise;","export const CovidDescriptionPart1 = \"Coronavirus disease (COVID-19) is an infectious disease caused by a new virus.\";\r\nexport const CovidDescriptionPart2 = \"The disease causes respiratory illness (like the flu) with symptoms such as a cough, fever, and in more severe cases, difficulty breathing. You can protect yourself by washing your hands frequently, avoiding touching your face, and avoiding close contact (1 meter or 3 feet) with people who are unwell.\";\r\nexport const CovidSpreadTitle = \"HOW IT SPREADS\";\r\nexport const CovidSpreadDescription = \"Coronavirus disease spreads primarily through contact with an infected person when they cough or sneeze. It also spreads when a person touches a surface or object that has the virus on it, then touches their eyes, nose, or mouth.\";\r\nexport const CovidApiURL = \"https://covid19.mathdro.id/api\";\r\nexport const CovidApiCountryURL = \"https://covid19.mathdro.id/api/countries\";\r\nexport const StatusConfirmed = \"Confirmed\";\r\nexport const StatusRecovered = \"Recovered\";\r\nexport const StatusDeath = \"Deaths\";","//import liraries\r\nimport React, { Component } from 'react';\r\nimport * as Constants from '../../Utilities/Constants';\r\nimport styles from './Covidstatus.module.css';\r\n\r\nimport CardComponent from '../../Components/CardComponent/CardComponent';\r\nimport CountryWiseComponent from '../CountryWise/CountryWise';\r\n\r\n// create a component\r\nclass Covidstatus extends Component {\r\n    state = {\r\n        globalStatus: [{\r\n            Title: Constants.StatusConfirmed,\r\n            Status: 0\r\n        },\r\n        {\r\n            Title: Constants.StatusRecovered,\r\n            Status: 0\r\n        },\r\n        {\r\n            Title: Constants.StatusDeath,\r\n            Status: 0\r\n        }],\r\n        globalStatusLoaded: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        var requestOptions = {\r\n            method: 'GET',\r\n            redirect: 'follow'\r\n        };\r\n\r\n        fetch(\"https://covid19.mathdro.id/api\", requestOptions)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                this.setState({\r\n                    globalStatus: [{\r\n                        Title: Constants.StatusConfirmed,\r\n                        Status: result.confirmed.value\r\n                    },\r\n                    {\r\n                        Title: Constants.StatusRecovered,\r\n                        Status: result.recovered.value\r\n                    },\r\n                    {\r\n                        Title: Constants.StatusDeath,\r\n                        Status: result.deaths.value\r\n                    }],\r\n                    globalStatusLoaded: true\r\n                })\r\n            })\r\n            .catch(error => console.log('error', error));\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.CovidBody}>\r\n                 <h3 className={styles.SelectedCountry}>Global Case</h3>\r\n            {\r\n                (this.state.globalStatusLoaded) ? \r\n                <CardComponent \r\n                    data={this.state.globalStatus} /> : null\r\n            }\r\n            <CountryWiseComponent defaultCountry=\"India\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//make this component available to the app\r\nexport default Covidstatus;\r\n","const aux = props => props.children;\r\n\r\nexport default aux;","//import liraries\r\nimport React from 'react';\r\nimport * as Constants from '../../Utilities/Constants';\r\nimport Aux from '../../hoc/Auxilary/Auxilary';\r\n// create a component\r\nconst covidDescription = (props) => (\r\n    <Aux>\r\n        <span>{Constants.CovidDescriptionPart1}</span>\r\n        <br />\r\n        <span>{Constants.CovidDescriptionPart2}</span>\r\n        <h3>{Constants.CovidSpreadTitle}</h3>\r\n        <span>{Constants.CovidSpreadDescription}</span>\r\n    </Aux>\r\n)\r\n\r\n//make this component available to the app\r\nexport default covidDescription;\r\n","import React from 'react';\nimport './App.css';\n\nimport Covidstatus from './Containers/CovidStatus/Covidstatus';\nimport CovidDescription from './Components/DescriptionComponent/DescriptionComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Covid-19 Tracker</h1>\n      <CovidDescription />\n      <Covidstatus/>\n    </div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Country\":\"CountryWise_Country___0Drf\",\"SelectBox\":\"CountryWise_SelectBox__UreQt\",\"SelectedCountry\":\"CountryWise_SelectedCountry__1LEgi\"};"],"sourceRoot":""}